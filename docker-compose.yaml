services:

  kafka:
    container_name: kafka
    image: obsidiandynamics/kafka
    restart: "no"
    ports:
      - "2181:2181"
      - "9092:9092"
    networks:
      - roboto-network
    environment:
      KAFKA_LISTENERS: "INTERNAL://:29092,EXTERNAL://:9092"
      KAFKA_ADVERTISED_LISTENERS: "INTERNAL://kafka:29092,EXTERNAL://localhost:9092"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: "INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT"
      KAFKA_INTER_BROKER_LISTENER_NAME: "INTERNAL"
      KAFKA_ZOOKEEPER_SESSION_TIMEOUT: "6000"
      KAFKA_RESTART_ATTEMPTS: "10"
      KAFKA_RESTART_DELAY: "5"
      ZOOKEEPER_AUTOPURGE_PURGE_INTERVAL: "0"
    volumes:
      - ./data/kafka/data:/var/lib/kafka/data
      
  redpanda-console:
    container_name: redpanda
    image: docker.redpanda.com/vectorized/console:latest
    restart: on-failure
    entrypoint: /bin/sh
    command: -c "echo \"$$CONSOLE_CONFIG_FILE\" > /tmp/config.yml; /app/console"
    ports:
      - "8021:8080"
    networks:
      - roboto-network
    environment:
      CONFIG_FILEPATH: /tmp/config.yml
      CONSOLE_CONFIG_FILE: |
        kafka:
          brokers: ["kafka:29092"]
    depends_on:
      - "kafka"

  kafka-init:
    container_name: kafka-init
    image: obsidiandynamics/kafka
    depends_on:
     - redpanda-console
    #entrypoint: ["tail", "-f", "/dev/null"]
    networks:
      - roboto-network
    entrypoint: [
      "sh", "-c",
      "/opt/kafka/bin/kafka-topics.sh --create --topic tpc-pacientes --partitions 3 --replication-factor 1 --bootstrap-server kafka:29092 && sleep 600"
     ]

  

  roboto-producer:
     container_name: roboto-producer
     build:
        dockerfile: './RobotoETL.Producer/Dockerfile'
     environment:
       - KafkaSettings__BootstrapServers=kafka:29092
       - PacientesProducerSettings__Topico=tpc-pacientes
       - PacientesProducerSettings__Quantidade=3000
     depends_on:
        - kafka-init
     networks:
        - roboto-network

  roboto-consumer:
     container_name: roboto-consumer
     #deploy:
     # replicas: 3
     build:
        dockerfile: './RobotoETL.Consumer/Dockerfile'
     environment:
        - KafkaSettings__BootstrapServers=kafka:29092
        - PacientesConsumerSettings__Topico=tpc-pacientes
     depends_on:
        - roboto-producer
     networks:
        - roboto-network


networks:
  roboto-network:
    driver: bridge